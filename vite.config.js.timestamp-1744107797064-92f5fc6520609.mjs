// vite.config.js
import { defineConfig } from "file:///E:/jekakoba/frontend/tailwind/template/node_modules/vite/dist/node/index.js";
import path2 from "path";

// template.config.js
var template_config_default = {
  tailwindcss: true,
  aliases: {
    "@html": "/src/htmls/",
    "@img": "/src/img/",
    "@fonts": "/src/fonts/",
    "@ui": "/src/html/components/UI/",
    "@js": "/src/js/",
    "@css": "/src/scss/"
  }
};

// imports.js
import vituum from "file:///E:/jekakoba/frontend/tailwind/template/node_modules/vituum/src/index.js";
import tailwindcss from "file:///E:/jekakoba/frontend/tailwind/template/node_modules/@tailwindcss/vite/dist/index.mjs";
import expressions2 from "file:///E:/jekakoba/frontend/tailwind/template/node_modules/posthtml-expressions/lib/index.js";
import beautify from "file:///E:/jekakoba/frontend/tailwind/template/node_modules/posthtml-beautify/lib/index.js";

// plugins/posthtml/customPostHtml.js
import posthtmlExtend from "file:///E:/jekakoba/frontend/tailwind/template/node_modules/posthtml-extend/lib/index.js";

// plugins/posthtml/customInclude.js
import fs from "fs";
import path from "path";
import posthtml from "file:///E:/jekakoba/frontend/tailwind/template/node_modules/posthtml/lib/index.js";
import { parser } from "file:///E:/jekakoba/frontend/tailwind/template/node_modules/posthtml-parser/dist/index.js";
import { match } from "file:///E:/jekakoba/frontend/tailwind/template/node_modules/posthtml/lib/api.js";
import expressions from "file:///E:/jekakoba/frontend/tailwind/template/node_modules/posthtml-expressions/lib/index.js";

// plugins/posthtml/posthtmlReplaceAliases.js
var replaceAliases = (data, { prependDot = false, normalizePath: normalizePath2 = true, sortAliases = true, preserveOriginal = true, transformReplacement } = {}) => {
  const aliases2 = template_config_default.aliases || {};
  if (preserveOriginal && Object.keys(aliases2).length === 0) {
    return data;
  }
  const escapeRegExp = (string) => string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  if (typeof data === "string") {
    let result = data;
    const sortedAliases = sortAliases ? Object.keys(aliases2).sort((a, b) => b.length - a.length) : Object.keys(aliases2);
    sortedAliases.forEach((alias) => {
      const regex = new RegExp(escapeRegExp(alias), "g");
      if (result.match(regex)) {
        let replacement = aliases2[alias];
        if (prependDot) {
          replacement = `.${replacement}`;
        }
        if (typeof transformReplacement === "function") {
          replacement = transformReplacement(replacement, alias);
        }
        result = result.replace(regex, replacement);
      }
    });
    if (normalizePath2) {
      result = result.replace(/\/+/g, "/");
    }
    return result;
  }
  if (Array.isArray(data)) {
    return data.map((item) => replaceAliases(item, { prependDot, normalizePath: normalizePath2, sortAliases, preserveOriginal, transformReplacement }));
  }
  if (data && typeof data === "object") {
    return Object.fromEntries(
      Object.entries(data).map(([key, value]) => [
        key,
        replaceAliases(value, { prependDot, normalizePath: normalizePath2, sortAliases, preserveOriginal, transformReplacement })
      ])
    );
  }
  return data;
};
var posthtmlReplaceAliases_default = replaceAliases;

// plugins/posthtml/customInclude.js
var processAttributes = (attrs, prependDot, targetAttrs) => {
  let src = false;
  for (const [attr, value] of Object.entries(attrs || {})) {
    if (typeof value === "string") {
      attrs[attr] = posthtmlReplaceAliases_default(value, { prependDot });
      if (targetAttrs.includes(attr)) src = attrs[attr];
    }
  }
  return src;
};
var customInclude_default = (options = {}) => {
  const { root = "./", encoding = "utf-8", posthtmlExpressionsOptions = { locals: false } } = options;
  const tagsArr = ["include", "fetch"];
  const attrArr = ["src", "url"];
  return function posthtmlInclude(tree) {
    tree.parser = tree.parser || parser;
    tree.match = tree.match || match;
    tagsArr.forEach((tag) => {
      tree.match({ tag }, (node) => {
        let src = node.attrs?.src || node.attrs?.url || false;
        const exprOptions = { ...posthtmlExpressionsOptions, ...options.delimiters && { delimiters: options.delimiters } };
        if (node.attrs) {
          src = processAttributes(node.attrs, true, attrArr);
        }
        if (tag === "include" && src) {
          const filePath = path.resolve(root, src);
          let source = fs.readFileSync(filePath, encoding);
          try {
            const localsRaw = node.attrs.locals || (node.content ? node.content.join("").replace(/\n/g, "") : false);
            if (localsRaw) {
              const localsJson = JSON.parse(localsRaw);
              exprOptions.locals = exprOptions.locals ? { ...exprOptions.locals, ...localsJson } : localsJson;
            }
          } catch {
          }
          if (exprOptions.locals) {
            source = posthtml().use(expressions(exprOptions)).process(source, { sync: true }).html;
          }
          const subtree = tree.parser(source);
          Object.assign(subtree, { match: tree.match, parser: tree.parser, messages: tree.messages });
          const content = source.includes("include") ? posthtmlInclude(subtree) : subtree;
          tree.messages.push({ type: "dependency", file: filePath });
          return { tag: false, content };
        }
        return node;
      });
    });
    tree.match({ attrs: true }, (node) => {
      if (!tagsArr.includes(node.tag) && node.attrs) {
        processAttributes(node.attrs, false, []);
      }
      return node;
    });
    return tree;
  };
};

// plugins/posthtml/customPostHtml.js
import posthtml2 from "file:///E:/jekakoba/frontend/tailwind/template/node_modules/posthtml/lib/index.js";
import { dirname } from "path";
import { merge, pluginError, normalizePath } from "file:///E:/jekakoba/frontend/tailwind/template/node_modules/vituum/src/utils/common.js";
var name = "TestPostHtml";
var defaultOptions = {
  root: null,
  include: {},
  extend: {},
  plugins: [],
  options: {}
};
var plugin = (pluginOptions = {}) => {
  pluginOptions = merge(defaultOptions, pluginOptions);
  if (pluginOptions.root) {
    pluginOptions.root = normalizePath(pluginOptions.root);
  }
  return {
    name,
    enforce: "pre",
    transformIndexHtml: {
      order: "pre",
      handler: async (html, { filename, server }) => {
        if (filename.replace(".html", "").endsWith(".json") && html.startsWith("{")) {
          return html;
        }
        const plugins = [];
        if (pluginOptions.extend) {
          plugins.push(posthtmlExtend({ root: pluginOptions.root ? pluginOptions.root : dirname(filename), ...pluginOptions.extend }));
        }
        if (pluginOptions.include) {
          plugins.push(customInclude_default({ root: pluginOptions.root ? pluginOptions.root : dirname(filename), ...pluginOptions.include }));
        }
        const render = await new Promise((resolve) => {
          const output = {};
          posthtml2(plugins.concat(...pluginOptions.plugins)).process(html, pluginOptions.options).catch((error) => {
            output.error = error;
            resolve(output);
          }).then((result) => {
            output.content = result?.html;
            resolve(output);
          });
        });
        const renderError = pluginError(render.error, server, name);
        if (renderError && server) {
          return;
        } else if (renderError) {
          return renderError;
        }
        return render.content;
      }
    }
  };
};
var customPostHtml_default = plugin;

// imports.js
var imports_default = {
  vituum,
  posthtml: customPostHtml_default,
  tailwindcss,
  expressions: expressions2,
  beautify
};

// vite.config.js
var makeAliases = (aliases2) => {
  return Object.entries(aliases2).reduce((acc, [key, value]) => {
    acc[key] = path2.resolve(process.cwd(), value);
    return acc;
  }, {});
};
var aliases = makeAliases(template_config_default.aliases);
var ignoredDirs = [
  "vendor",
  "node_modules",
  "plugins",
  "dist",
  ".git",
  "documentation",
  "fonts-convert"
];
var ignoredFiles = ["package.json", "yarn.lock", "snippets.json", "README.md"];
var vite_config_default = defineConfig({
  plugins: [
    imports_default.vituum(),
    imports_default.posthtml({
      encoding: "utf-8",
      root: process.cwd(),
      plugins: [
        imports_default.expressions(),
        imports_default.beautify({ rules: { blankLines: "", sortAttrs: true } }),
        ...template_config_default.addImgSizes ? [imports_default.imgAutosize()] : []
      ]
    }),
    // Hot Module Replacement
    {
      name: "custom-hmr",
      enforce: "post",
      handleHotUpdate({ file, server }) {
        if (file.endsWith(".html") || file.endsWith(".php")) {
          server.ws.send({ type: "full-reload", path: "*" });
        }
      }
    }
  ],
  // CSS preprocessor
  css: {
    devSourcemap: true,
    preprocessorOptions: {
      scss: {
        sourceMap: true,
        quietDeps: true
      }
    }
  },
  // Server config
  server: {
    host: "0.0.0.0",
    watch: {
      ignored: [
        ...ignoredDirs.map((dir) => `**/${dir}/**`),
        ...ignoredFiles.map((file) => `**/${file}/**`)
      ]
    }
  },
  resolve: {
    alias: { ...aliases }
  },
  build: {
    // Output directory
    outDir: "dist",
    // Generate manifest file for production
    manifest: false,
    // Configure rollup options
    rollupOptions: {
      output: {
        entryFileNames: "js/[name].js",
        chunkFileNames: "js/[name].js",
        assetFileNames: (assetInfo) => {
          if (assetInfo.name.endsWith(".css")) {
            return "css/[name][extname]";
          }
          return "assets/[name][extname]";
        }
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
